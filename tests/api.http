@baseUrl = http://localhost:3000
@pokemonId = 65c2a1234567890123456789
@invalidId = invalid-id

### 1. List all Pokemon
GET {{baseUrl}}/pokemon

### 2. List Pokemon with filters and pagination
# Filter by type
GET {{baseUrl}}/pokemon?type=Electric

# Filter by ability
GET {{baseUrl}}/pokemon?ability=Static

# Pagination
GET {{baseUrl}}/pokemon?limit=2&offset=1

# Invalid filters (should return 400)
GET {{baseUrl}}/pokemon?limit=invalid&offset=-1

### 3. Get a Pokemon by ID
# Get existing Pokemon
GET {{baseUrl}}/pokemon/{{pokemonId}}

# Try to get non-existent Pokemon (should return 404)
GET {{baseUrl}}/pokemon/65c2a1234567890123456780

# Invalid ID (should return 500)
GET {{baseUrl}}/pokemon/{{invalidId}}

### 4. Create a new Pokemon
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu",
    "thumbnailUrl": "http://example.com/pikachu-thumb.jpg",
    "largeImageUrl": "http://example.com/pikachu-large.jpg",
    "types": ["Electric"],
    "abilities": ["Static", "Lightning Rod"],
    "stats": {
        "hp": 35,
        "attack": 55,
        "defense": 40,
        "specialAttack": 50,
        "specialDefense": 50,
        "speed": 90
    }
}

### 5. Create Pokemon with invalid data (should return 400)
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu"
}

### 6. Create Pokemon with invalid stats (should return 400)
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu",
    "thumbnailUrl": "http://example.com/pikachu-thumb.jpg",
    "largeImageUrl": "http://example.com/pikachu-large.jpg",
    "types": ["Electric"],
    "abilities": ["Static"],
    "stats": {
        "hp": -1,
        "attack": 55,
        "defense": 40,
        "specialAttack": 50,
        "specialDefense": 50,
        "speed": 90
    }
}

### 7. Update an existing Pokemon
PUT {{baseUrl}}/pokemon/{{pokemonId}}
Content-Type: application/json

{
    "name": "Raichu",
    "stats": {
        "hp": 60,
        "attack": 90,
        "defense": 55,
        "specialAttack": 90,
        "specialDefense": 80,
        "speed": 110
    }
}

### 8. Update non-existent Pokemon (should return 404)
PUT {{baseUrl}}/pokemon/65c2a1234567890123456780
Content-Type: application/json

{
    "name": "Raichu"
}

### 9. Update Pokemon with invalid data (should return 400)
PUT {{baseUrl}}/pokemon/{{pokemonId}}
Content-Type: application/json

{
    "stats": {
        "hp": -1
    }
}

### 10. Delete a Pokemon
DELETE {{baseUrl}}/pokemon/{{pokemonId}}

### 11. Delete non-existent Pokemon (should return 404)
DELETE {{baseUrl}}/pokemon/65c2a1234567890123456780

### 12. Delete Pokemon with invalid ID (should return 500)
DELETE {{baseUrl}}/pokemon/{{invalidId}}

### 13. Initialize the database from PokeAPI
POST {{baseUrl}}/initialize-db
Content-Type: application/json

{}
