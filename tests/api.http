@baseUrl = http://localhost:3000/api/v1
@pokemonId = 65c2a1234567890123456789
@invalidId = invalid-id

### List all Pokemon
GET {{baseUrl}}/pokemon

### Filter Pokemon by type
GET {{baseUrl}}/pokemon?types=electric

### Filter Pokemon by ability
GET {{baseUrl}}/pokemon?abilities=static

### Filter Pokemon by multiple types
GET {{baseUrl}}/pokemon?types=electric,fire

### Filter Pokemon by multiple abilities
GET {{baseUrl}}/pokemon?abilities=static,blaze

### Filter Pokemon by type and ability
GET {{baseUrl}}/pokemon?types=electric&abilities=static

### Get Pokemon with pagination
GET {{baseUrl}}/pokemon?page=1&limit=10

### Test invalid pagination parameters
GET {{baseUrl}}/pokemon?limit=invalid&page=-1

### Test invalid Pokemon type
GET {{baseUrl}}/pokemon?types=invalid-type

### Get Pokemon by valid ID
GET {{baseUrl}}/pokemon/{{pokemonId}}

### Get non-existent Pokemon
GET {{baseUrl}}/pokemon/65c2a1234567890123456780

### Get Pokemon with invalid ID format
GET {{baseUrl}}/pokemon/{{invalidId}}

### Create a new Pokemon
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu",
    "thumbnailUrl": "http://example.com/pikachu-thumb.jpg",
    "largeImageUrl": "http://example.com/pikachu-large.jpg",
    "types": ["Electric"],
    "abilities": ["Static", "Lightning Rod"],
    "stats": {
        "hp": 35,
        "attack": 55,
        "defense": 40,
        "specialAttack": 50,
        "specialDefense": 50,
        "speed": 90
    }
}

### Create Pokemon with missing required fields
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu"
}

### Create Pokemon with invalid stats
POST {{baseUrl}}/pokemon
Content-Type: application/json

{
    "name": "Pikachu",
    "thumbnailUrl": "http://example.com/pikachu-thumb.jpg",
    "largeImageUrl": "http://example.com/pikachu-large.jpg",
    "types": ["Electric"],
    "abilities": ["Static"],
    "stats": {
        "hp": -1,
        "attack": 55,
        "defense": 40,
        "specialAttack": 50,
        "specialDefense": 50,
        "speed": 90
    }
}

### Update an existing Pokemon
PUT {{baseUrl}}/pokemon/{{pokemonId}}
Content-Type: application/json

{
    "name": "Raichu",
    "stats": {
        "hp": 60,
        "attack": 90,
        "defense": 55,
        "specialAttack": 90,
        "specialDefense": 80,
        "speed": 110
    }
}

### Update non-existent Pokemon
PUT {{baseUrl}}/pokemon/65c2a1234567890123456780
Content-Type: application/json

{
    "name": "Raichu"
}

### Update Pokemon with invalid stats
PUT {{baseUrl}}/pokemon/{{pokemonId}}
Content-Type: application/json

{
    "stats": {
        "hp": -1
    }
}

### Delete a Pokemon
DELETE {{baseUrl}}/pokemon/{{pokemonId}}

### Delete non-existent Pokemon
DELETE {{baseUrl}}/pokemon/65c2a1234567890123456780

### 11. Delete non-existent Pokemon (should return 404)
DELETE {{baseUrl}}/pokemon/65c2a1234567890123456780

### 12. Delete Pokemon with invalid ID (should return 500)
DELETE {{baseUrl}}/pokemon/{{invalidId}}